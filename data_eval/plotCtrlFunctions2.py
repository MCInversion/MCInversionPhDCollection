import matplotlib.pyplot as plt

# Data for outer and inner epsilon and eta
OUTER_DEBUG_EPSILON = [[
	0.00152452,
	0.00124351,
	0.00122836,
	0.00122923,
	0.00124828,
	0.0011335,
	0.00106063,
	0.00092239,
	0.000814231,
	0.000768413,
	0.00095462,
	0.000617901,
	0.000558107,
	0.000565831,
	0.000616678,
	0.000909009,
	0.000760327,
	0.000811513,
	0.000917136,
	0.00105352
], [
	0.000894688,
	0.000968311,
	0.00101751,
	0.00101751,
	0.000966153,
	0.000904774,
	0.000830825,
	0.000748285,
	0.000652035,
	0.000562413,
	0.000523329,
	0.000472449,
	0.000440268,
	0.000439179,
	0.00047259,
	0.000528375,
	0.000562835,
	0.000652178,
	0.000748547,
	0.00083614
], [
	0.000791396,
	0.000811041,
	0.000821866,
	0.000821809,
	0.000809409,
	0.00079961,
	0.000700928,
	0.000577913,
	0.000504623,
	0.000449403,
	0.000463337,
	0.00032225,
	0.000313201,
	0.000312434,
	0.000322437,
	0.00046771,
	0.000449767,
	0.000504742,
	0.000578149,
	0.000705969
], [
	0.000700527,
	0.00068534,
	0.000682863,
	0.000682817,
	0.000683631,
	0.000707233,
	0.000519261,
	0.000465458,
	0.000400372,
	0.000358653,
	0.000244861,
	0.000246337,
	0.00023766,
	0.000237044,
	0.00024446,
	0.000244145,
	0.000358942,
	0.000400474,
	0.000465662,
	0.000521583
]]
OUTER_DEBUG_ETA = [ [
	-0.0416522,
	-0.0362566,
	-0.0357816,
	-0.0357535,
	-0.0365151,
	-0.0405557,
	-0.0340123,
	-0.0315753,
	-0.0295651,
	-0.0286857,
	-0.0329489,
	-0.0261125,
	-0.0241112,
	-0.024615,
	-0.0259752,
	-0.0321462,
	-0.0285401,
	-0.0295423,
	-0.0315112,
	-0.0337706
], [
	-0.0302719,
	-0.0322611,
	-0.0326285,
	-0.0326279,
	-0.0322534,
	-0.0305663,
	-0.029158,
	-0.0283911,
	-0.0262827,
	-0.024334,
	-0.0240182,
	-0.0222919,
	-0.0215814,
	-0.021552,
	-0.0222901,
	-0.0241534,
	-0.0243445,
	-0.0262853,
	-0.0283963,
	-0.029115
], [
	-0.0285266,
	-0.0290358,
	-0.029477,
	-0.0294779,
	-0.0289521,
	-0.0287915,
	-0.0276456,
	-0.0249401,
	-0.023563,
	-0.0224319,
	-0.0226327,
	-0.0182375,
	-0.0181385,
	-0.0181177,
	-0.0182376,
	-0.0227581,
	-0.0224448,
	-0.0235652,
	-0.0249452,
	-0.0276311
], [
	-0.0268668,
	-0.0271742,
	-0.0269017,
	-0.0269015,
	-0.0270549,
	-0.0271051,
	-0.0231799,
	-0.0224445,
	-0.0209943,
	-0.0203596,
	-0.0187125,
	-0.0164867,
	-0.0159564,
	-0.015935,
	-0.0164618,
	-0.018718,
	-0.0203641,
	-0.0209963,
	-0.0224504,
	-0.0231678
]]
INNER_DEBUG_EPSILON = [[ # step 1
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0
], [ # step 2
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0
], [ # step 3
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0
], [ # step 4
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0
]]
INNER_DEBUG_ETA = [[
	-0.0256608,
	-0.0226758,
	-0.0227508,
	-0.0220763,
	-0.0208097,
	-0.0221332,
	-0.0227605,
	-0.0255329,
	-0.0254327,
	-0.0297939,
	-0.0259161,
	-0.0270085,
	-0.0269555,
	-0.0291751,
	-0.0305258,
	-0.0306042,
	-0.0349974,
	-0.0342155,
	-0.0333877,
	-0.0332035,
	-0.0322579,
	-0.0331493,
	-0.0333697,
	-0.034414,
	-0.0364545,
	-0.0308066,
	-0.0305439,
	-0.0291661,
	-0.0269307,
	-0.0269896,
	-0.0259857,
	-0.0260134
], [
	-0.020409,
	-0.0231493,
	-0.0192032,
	-0.0189274,
	-0.017663,
	-0.0189256,
	-0.019151,
	-0.0229254,
	-0.0207763,
	-0.0250826,
	-0.0225299,
	-0.0237639,
	-0.0238274,
	-0.0258885,
	-0.0270816,
	-0.0305037,
	-0.0294062,
	-0.0354269,
	-0.0304339,
	-0.0303033,
	-0.0294958,
	-0.0302816,
	-0.0304446,
	-0.0353601,
	-0.0293856,
	-0.030432,
	-0.027088,
	-0.0258923,
	-0.0238313,
	-0.0237711,
	-0.0225323,
	-0.0252577
], [
	-0.0200305,
	-0.0161237,
	-0.0171685,
	-0.0157602,
	-0.0148129,
	-0.0157566,
	-0.0171362,
	-0.0169077,
	-0.0199121,
	-0.0215449,
	-0.0211294,
	-0.0213387,
	-0.0206773,
	-0.0238521,
	-0.0243774,
	-0.0249301,
	-0.026499,
	-0.0279608,
	-0.0273847,
	-0.0276302,
	-0.0266146,
	-0.0276218,
	-0.0273776,
	-0.0309139,
	-0.0263828,
	-0.0249143,
	-0.024377,
	-0.0238523,
	-0.020682,
	-0.0213436,
	-0.0211133,
	-0.0218154
], [
	-0.0205918,
	-0.0137609,
	-0.0136504,
	-0.0135164,
	-0.0123355,
	-0.0135139,
	-0.0136151,
	-0.0135974,
	-0.0205441,
	-0.0144193,
	-0.0171149,
	-0.0182575,
	-0.0183304,
	-0.0205628,
	-0.0214032,
	-0.0216777,
	-0.0271557,
	-0.0273453,
	-0.0261376,
	-0.0256045,
	-0.0240419,
	-0.0255963,
	-0.0261422,
	-0.0271315,
	-0.0269351,
	-0.0216959,
	-0.0214094,
	-0.0205659,
	-0.0183341,
	-0.0182631,
	-0.0171281,
	-0.0145681
]]

# Create a figure with two subplots for epsilon and eta
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))

# Define the number of time steps
time_steps = len(OUTER_DEBUG_EPSILON)

# Define the starting and ending alpha values
alpha_start = 0.1
alpha_end = 1.0
alpha_step = (alpha_end - alpha_start) / (time_steps - 1)

# Plot epsilon values for outer and inner manifolds, adjusting alpha
for step in range(time_steps):
    alpha = alpha_start + step * alpha_step
    label_outer = f'Outer Epsilon (Step {step+1})' if alpha == 1 else None
    label_inner = f'Inner Epsilon (Step {step+1})' if alpha == 1 else None
    ax1.plot(OUTER_DEBUG_EPSILON[step], label=label_outer, color='#45caff', marker='o', alpha=alpha)
    ax1.plot(INNER_DEBUG_EPSILON[step], label=label_inner, color='blue', marker='o', alpha=alpha)

ax1.set_title('Epsilon Control Weight')
ax1.set_xlabel('Vertex Index')
ax1.set_ylabel('Epsilon')
# Set y-limits dynamically based on the data
all_outer_epsilon = [val for sublist in OUTER_DEBUG_EPSILON for val in sublist]
all_inner_epsilon = [val for sublist in INNER_DEBUG_EPSILON for val in sublist]
ax1.set_ylim(min(min(all_outer_epsilon), min(all_inner_epsilon)), max(max(all_outer_epsilon), max(all_inner_epsilon)))
ax1.grid(True)

# Plot eta values for outer and inner manifolds, adjusting alpha
for step in range(time_steps):
    alpha = alpha_start + step * alpha_step
    label_outer = f'Outer Eta (Step {step+1})' if alpha == 1 else None
    label_inner = f'Inner Eta (Step {step+1})' if alpha == 1 else None
    ax2.plot(OUTER_DEBUG_ETA[step], label=label_outer, color='#45caff', marker='o', alpha=alpha)
    ax2.plot(INNER_DEBUG_ETA[step], label=label_inner, color='blue', marker='o', alpha=alpha)

ax2.set_title('Eta Control Weight')
ax2.set_xlabel('Vertex Index')
ax2.set_ylabel('Eta')
# Set y-limits dynamically based on the data
all_outer_eta = [val for sublist in OUTER_DEBUG_ETA for val in sublist]
all_inner_eta = [val for sublist in INNER_DEBUG_ETA for val in sublist]
ax2.set_ylim(min(min(all_outer_eta), min(all_inner_eta)), max(max(all_outer_eta), max(all_inner_eta)))
ax2.grid(True)

# Add the legend for the last time step only (alpha = 1)
ax1.legend()
ax2.legend()

# Adjust layout to prevent overlap
plt.tight_layout()

# Display the plot
plt.show()


