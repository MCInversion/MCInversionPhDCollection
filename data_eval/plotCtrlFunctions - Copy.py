import matplotlib.pyplot as plt

# Data for outer and inner epsilon and eta
OUTER_DEBUG_EPSILON = [[ # step 1
	0.00152452,
	0.00124351,
	0.00122836,
	0.00122923,
	0.00124828,
	0.0011335,
	0.00106063,
	0.00092239,
	0.000814231,
	0.000768413,
	0.00095462,
	0.000617901,
	0.000558107,
	0.000565831,
	0.000616678,
	0.000909009,
	0.000760327,
	0.000811513,
	0.000917136,
	0.00105352
], [ # step 2
	0.00133458,
	0.00109375,
	0.00107852,
	0.00107938,
	0.00109769,
	0.000983511,
	0.00092962,
	0.000810643,
	0.000716753,
	0.000679505,
	0.000839681,
	0.000543641,
	0.000493631,
	0.000499328,
	0.000543087,
	0.000799855,
	0.000672156,
	0.000714164,
	0.000805684,
	0.000923532
], [ # step 3
	0.00117087,
	0.000962221,
	0.000947554,
	0.000949064,
	0.000965758,
	0.000854448,
	0.000814558,
	0.00071316,
	0.000631305,
	0.000601105,
	0.000739769,
	0.000478043,
	0.000436796,
	0.000440862,
	0.000478071,
	0.000704855,
	0.000594446,
	0.000628884,
	0.000709179,
	0.00080935
], [ # step 4
	0.00102919,
	0.000847503,
	0.000835201,
	0.000836322,
	0.000850862,
	0.000744017,
	0.000714185,
	0.000629088,
	0.000557,
	0.000532101,
	0.000652672,
	0.000420188,
	0.00038735,
	0.000389907,
	0.000420871,
	0.000621962,
	0.000526206,
	0.000555337,
	0.000625241,
	0.000709811
]]
OUTER_DEBUG_ETA = [ [ # step 1
	-0.0416522,
	-0.0362566,
	-0.0357816,
	-0.0357535,
	-0.0365151,
	-0.0405557,
	-0.0340123,
	-0.0315753,
	-0.0295651,
	-0.0286857,
	-0.0329489,
	-0.0261125,
	-0.0241112,
	-0.024615,
	-0.0259752,
	-0.0321462,
	-0.0285401,
	-0.0295423,
	-0.0315112,
	-0.0337706
], [ # step 2
	-0.039015,
	-0.0342577,
	-0.0334549,
	-0.0334221,
	-0.0344682,
	-0.0378838,
	-0.0319472,
	-0.0294902,
	-0.0276678,
	-0.0271476,
	-0.0309363,
	-0.0246023,
	-0.0226389,
	-0.0230631,
	-0.0244716,
	-0.0301886,
	-0.0269696,
	-0.0276331,
	-0.0294112,
	-0.0316964
], [ # step 3
	-0.0365843,
	-0.0323676,
	-0.0311559,
	-0.0312544,
	-0.0325441,
	-0.0353959,
	-0.0299695,
	-0.0275399,
	-0.0258671,
	-0.0256899,
	-0.029069,
	-0.0231629,
	-0.0212335,
	-0.021585,
	-0.0230399,
	-0.0283698,
	-0.0254887,
	-0.0258223,
	-0.0275395,
	-0.029726
], [ # step 4
	-0.0343371,
	-0.0306161,
	-0.0293078,
	-0.0293908,
	-0.0307672,
	-0.0331171,
	-0.0281535,
	-0.0258646,
	-0.0242291,
	-0.0243205,
	-0.0273327,
	-0.0217968,
	-0.0200525,
	-0.0202768,
	-0.0216994,
	-0.0266766,
	-0.0241045,
	-0.0242466,
	-0.0258559,
	-0.0279491
]]
INNER_DEBUG_EPSILON = [[ # step 1
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0
], [ # step 2
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0
], [ # step 3
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0
], [ # step 4
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0
]]
INNER_DEBUG_ETA = [[ # step 1
	-0.0256608,
	-0.0226758,
	-0.0227508,
	-0.0220763,
	-0.0208097,
	-0.0221332,
	-0.0227605,
	-0.0255329,
	-0.0254327,
	-0.0297939,
	-0.0259161,
	-0.0270085,
	-0.0269555,
	-0.0291751,
	-0.0305258,
	-0.0306042,
	-0.0349974,
	-0.0342155,
	-0.0333877,
	-0.0332035,
	-0.0322579,
	-0.0331493,
	-0.0333697,
	-0.034414,
	-0.0364545,
	-0.0308066,
	-0.0305439,
	-0.0291661,
	-0.0269307,
	-0.0269896,
	-0.0259857,
	-0.0260134
], [ # step 2
	-0.112156,
	0.978471,
	1.97512,
	2.78813,
	3.13393,
	2.78816,
	1.98815,
	0.977019,
	-0.107061,
	-1.27688,
	-2.38744,
	-3.36619,
	-4.22743,
	-4.92635,
	-5.44819,
	-5.75552,
	-5.85586,
	-5.78252,
	-5.5422,
	-5.2162,
	-5.03361,
	-5.21622,
	-5.54181,
	-5.7813,
	-5.85586,
	-5.75384,
	-5.44774,
	-4.92622,
	-4.22739,
	-3.36662,
	-2.36819,
	-1.27754
], [ # step 3
	2.28555,
	0.526227,
	-1.47624,
	-3.49436,
	-4.55944,
	-3.48225,
	-1.48574,
	0.506905,
	2.28544,
	2.99021,
	1.82976,
	0.0154569,
	-1.84117,
	-3.50436,
	-4.79411,
	-5.58681,
	-5.84417,
	-5.78789,
	-5.56992,
	-5.48169,
	-5.47666,
	-5.48169,
	-5.5696,
	-5.78708,
	-5.84413,
	-5.58476,
	-4.79283,
	-3.50411,
	-1.84155,
	0.0337722,
	1.84569,
	2.99039
], [ # step 4
	-0.0806291,
	1.915,
	3.2762,
	-2.85561,
	-5.2953,
	-2.84234,
	3.26558,
	1.93087,
	-0.0582121,
	2.90444,
	0.198284,
	2.25969,
	1.42235,
	-1.21161,
	-3.69736,
	-5.29499,
	-5.80673,
	-5.83363,
	-5.73102,
	-5.70287,
	-5.70092,
	-5.70286,
	-5.73086,
	-5.8333,
	-5.80667,
	-5.292,
	-3.69397,
	-1.21128,
	1.43289,
	2.25504,
	0.199586,
	2.91186
]]

# Create a figure with two subplots for epsilon and eta
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))

# Define the number of time steps
time_steps = len(OUTER_DEBUG_EPSILON)

# Define the starting and ending alpha values
alpha_start = 0.1
alpha_end = 1.0
alpha_step = (alpha_end - alpha_start) / (time_steps - 1)

# Plot epsilon values for outer and inner manifolds, adjusting alpha
for step in range(time_steps):
    alpha = alpha_start + step * alpha_step
    label_outer = f'Outer Epsilon (Step {step+1})' if alpha == 1 else None
    label_inner = f'Inner Epsilon (Step {step+1})' if alpha == 1 else None
    ax1.plot(OUTER_DEBUG_EPSILON[step], label=label_outer, color='#45caff', marker='o', alpha=alpha)
    ax1.plot(INNER_DEBUG_EPSILON[step], label=label_inner, color='blue', marker='o', alpha=alpha)

ax1.set_title('Epsilon Control Weight')
ax1.set_xlabel('Vertex Index')
ax1.set_ylabel('Epsilon')
# Set y-limits dynamically based on the data
all_outer_epsilon = [val for sublist in OUTER_DEBUG_EPSILON for val in sublist]
all_inner_epsilon = [val for sublist in INNER_DEBUG_EPSILON for val in sublist]
ax1.set_ylim(min(min(all_outer_epsilon), min(all_inner_epsilon)), max(max(all_outer_epsilon), max(all_inner_epsilon)))
ax1.grid(True)

# Plot eta values for outer and inner manifolds, adjusting alpha
for step in range(time_steps):
    alpha = alpha_start + step * alpha_step
    label_outer = f'Outer Eta (Step {step+1})' if alpha == 1 else None
    label_inner = f'Inner Eta (Step {step+1})' if alpha == 1 else None
    ax2.plot(OUTER_DEBUG_ETA[step], label=label_outer, color='#45caff', marker='o', alpha=alpha)
    ax2.plot(INNER_DEBUG_ETA[step], label=label_inner, color='blue', marker='o', alpha=alpha)

ax2.set_title('Eta Control Weight')
ax2.set_xlabel('Vertex Index')
ax2.set_ylabel('Eta')
# Set y-limits dynamically based on the data
all_outer_eta = [val for sublist in OUTER_DEBUG_ETA for val in sublist]
all_inner_eta = [val for sublist in INNER_DEBUG_ETA for val in sublist]
ax2.set_ylim(min(min(all_outer_eta), min(all_inner_eta)), max(max(all_outer_eta), max(all_inner_eta)))
ax2.grid(True)

# Add the legend for the last time step only (alpha = 1)
ax1.legend()
ax2.legend()

# Adjust layout to prevent overlap
plt.tight_layout()

# Display the plot
plt.show()


